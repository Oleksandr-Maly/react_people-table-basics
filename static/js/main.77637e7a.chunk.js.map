{"version":3,"sources":["components/NavLink/NavLink.tsx","components/NavBar/NavBar.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PersonInfo/PersonInfo.tsx","components/PeoplesTable/PeopleTable.tsx","components/PeoplesPage/PeoplesPage.tsx","App.tsx","index.tsx"],"names":["NavLinkPage","to","text","className","isActive","classNames","NavBar","role","API_URL","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","name","slug","isWoman","sex","PersonInfo","person","findPersonByName","selectedSlug","born","died","motherName","fatherName","mother","father","isSelectedPerson","PeopleTable","people","find","parent","map","PeoplesPage","useState","setPeople","isLoaded","setIsLoaded","isError","setIsError","useParams","fetchPeople","peopleFromServer","useEffect","IsPeopleFromServer","length","App","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.77637e7a.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink, To } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n  text: string;\n  to:To;\n};\n\nexport const NavLinkPage:React.FC<Props> = ({ to, text }) => {\n  return (\n\n    <NavLink\n      to={to}\n      className={({ isActive }) => {\n        return classNames('navbar-item', {\n          'has-background-grey-lighter': isActive,\n        });\n      }}\n    >\n      {text}\n    </NavLink>\n  );\n};\n","import React from 'react';\nimport { NavLinkPage } from '../NavLink';\n\nexport const NavBar:React.FC = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n\n          <NavLinkPage to=\"/\" text=\"Home\" />\n\n          <NavLinkPage to=\"/people\" text=\"People\" />\n\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\ntype Props = {\n  name:string,\n  slug:string,\n  sex: string,\n};\n\nexport const PersonLink: React.FC<Props> = ({ name, slug, sex }) => {\n  const isWoman = sex === 'f';\n\n  return (\n    <td>\n      <Link\n        to={`/people/${slug}`}\n        className={classNames({ 'has-text-danger': isWoman })}\n      >\n        {name}\n      </Link>\n    </td>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\n\ntype Props = {\n  person: Person,\n  findPersonByName: (name:string | null) => Person | undefined,\n  selectedSlug:string\n};\n\nexport const PersonInfo: React.FC<Props> = ({\n  person,\n  findPersonByName,\n  selectedSlug,\n}) => {\n  const {\n    name,\n    sex,\n    born,\n    died,\n    motherName,\n    fatherName,\n    slug,\n  } = person;\n\n  const mother = findPersonByName(motherName);\n  const father = findPersonByName(fatherName);\n\n  const isSelectedPerson = person.slug === selectedSlug;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({ 'has-background-warning': isSelectedPerson })}\n    >\n      <PersonLink name={name} slug={slug} sex={sex} />\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      {mother\n        ? <PersonLink name={mother.name} slug={mother.slug} sex={mother.sex} />\n        : <td>{motherName || '-'}</td>}\n      {father\n        ? <PersonLink name={father.name} slug={father.slug} sex={father.sex} />\n        : <td>{fatherName || '-'}</td>}\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Person } from '../../types';\nimport { PersonInfo } from '../PersonInfo';\n\ntype Props = {\n  people: Person[]\n  selectedSlug:string,\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, selectedSlug }) => {\n  const findPersonByName = (name:string | null) => {\n    return people.find(parent => parent.name === name);\n  };\n\n  return (\n    <div className=\"box table-container\">\n      <table\n        data-cy=\"peopleTable\"\n        className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n      >\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Sex</th>\n            <th>Born</th>\n            <th>Died</th>\n            <th>Mother</th>\n            <th>Father</th>\n          </tr>\n        </thead>\n\n        <tbody>\n\n          {people.map(person => (\n            <PersonInfo\n              key={person.slug}\n              person={person}\n              findPersonByName={findPersonByName}\n              selectedSlug={selectedSlug}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPeople } from '../../api';\nimport { Person } from '../../types';\nimport { Loader } from '../Loader';\nimport { PeopleTable } from '../PeoplesTable';\n\nexport const PeoplesPage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const { slug = '' } = useParams();\n\n  const fetchPeople = async () => {\n    setIsLoaded(true);\n    try {\n      const peopleFromServer = await getPeople();\n\n      setIsLoaded(false);\n\n      setPeople(peopleFromServer);\n    } catch {\n      setIsError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchPeople();\n  }, []);\n  const IsPeopleFromServer = !isLoaded && people.length === 0;\n\n  return (\n    <div className=\"block\">\n      {isLoaded && <Loader /> }\n\n      {isError && (\n        <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n          Something went wrong\n        </p>\n      )}\n\n      {people.length > 0\n      && (\n        <PeopleTable\n          people={people}\n          selectedSlug={slug}\n        />\n      )}\n\n      {IsPeopleFromServer\n      && (\n        <p data-cy=\"noPeopleMessage\">\n          There are no people on the server\n        </p>\n      )}\n\n    </div>\n  );\n};\n","import { Routes, Route, Navigate } from 'react-router-dom';\n\nimport './App.scss';\nimport { NavBar } from './components/NavBar';\nimport { PeoplesPage } from './components/PeoplesPage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <Routes>\n        <Route path=\"*\" element={<p>Page not found</p>} />\n        <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"/people\" element={<PeoplesPage />}>\n          <Route path=\":slug\" element={<PeoplesPage />} />\n        </Route>\n      </Routes>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <HashRouter>\n      <App />\n    </HashRouter>,\n  );\n"],"sourceRoot":""}